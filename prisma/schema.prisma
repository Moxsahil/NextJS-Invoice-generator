generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(cuid())
  email                String     @unique
  name                 String
  password             String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  accountName          String?
  accountNumber        String?
  bankBranch           String?
  bankName             String?
  browserNotifications Boolean    @default(true)
  colorScheme          String     @default("blue")
  companyAddress       String?
  companyCity          String?
  companyCountry       String?    @default("India")
  companyEmail         String?
  companyGSTIN         String?
  companyLogo          String?
  companyName          String?
  companyPhone         String?
  companyState         String?
  companyWebsite       String?
  companyZipCode       String?
  defaultCurrency      String     @default("INR")
  defaultPaymentTerms  String     @default("30 days")
  defaultTaxRate       Float      @default(18.0)
  sgstRate             Float      @default(9.0)
  cgstRate             Float      @default(9.0)
  igstRate             Float      @default(18.0)
  emailNotifications   Boolean    @default(true)
  fontSize             String     @default("medium")
  ifscCode             String?
  invoiceFooter        String?
  invoicePrefix        String     @default("INV")
  invoiceSuffix        String?
  invoiceReminders     Boolean    @default(true)
  invoiceStartNumber   Int        @default(1001)
  invoiceResetNumbering String    @default("never")
  includeQRCode        Boolean    @default(true)
  showBankDetails      Boolean    @default(true)
  showCompanyLogo      Boolean    @default(true)
  showPaymentTerms     Boolean    @default(true)
  autoSendEmail        Boolean    @default(false)
  emailTemplate        String     @default("professional")
  defaultTerms         String?
  language             String?    @default("en")
  marketingEmails      Boolean    @default(false)
  passwordLastChanged  DateTime?
  paymentAlerts        Boolean    @default(true)
  phone                String?
  sessionTimeout       Int        @default(30)
  theme                String     @default("light")
  timezone             String?    @default("Asia/Kolkata")
  twoFactorEnabled     Boolean    @default(false)
  upiId                String?
  merchantName         String?
  customers            Customer[]
  invoices             Invoice[]
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  companyName     String
  companyGSTIN    String?
  companyAddress  String
  companyPhone    String?
  customerName    String
  customerGSTIN   String?
  customerAddress String
  invoiceDate     DateTime
  dueDate         DateTime
  subtotal        Float
  sgstAmount      Float
  cgstAmount      Float
  totalAmount     Float
  status          InvoiceStatus @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  customerId      String?
  customer        Customer?     @relation(fields: [customerId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  items           InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Float
  rate        Float
  amount      Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  gstin     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  status    String    @default("Active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  invoices  Invoice[]
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}
