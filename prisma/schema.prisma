// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  invoices  Invoice[]
  customers Customer[]
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  companyName     String
  companyGSTIN    String?
  companyAddress  String
  companyPhone    String?
  customerName    String
  customerGSTIN   String?
  customerAddress String
  invoiceDate     DateTime
  dueDate         DateTime
  subtotal        Float
  sgstAmount      Float
  cgstAmount      Float
  totalAmount     Float
  status          InvoiceStatus @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  customerId      String?
  user            User          @relation(fields: [userId], references: [id])
  items           InvoiceItem[]
  customer        Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Float
  rate        Float
  amount      Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  gstin     String? // GST Identification Number
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  status    String   @default("Active") // "Active" | "Inactive"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  invoices Invoice[]
}
